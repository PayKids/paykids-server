name: Java CI with Gradle (No Docker)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      # 3. Build JAR
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean bootJar

      # 4. Setup SSH
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      # 5. Upload .jar & .env
      - name: Upload JAR and .env to EC2
        run: |
          JAR_NAME=$(find build/libs -name "*.jar" | head -n 1)
          scp -i ~/.ssh/ec2_key.pem "$JAR_NAME" ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/app.jar

          echo "DB_URL=${{ secrets.DB_URL }}" > .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "GPT_KEY=${{ secrets.GPT_KEY }}" >> .env
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> .env
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "AWS_S3_BUCKETNAME=${{ secrets.AWS_S3_BUCKETNAME }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "ADMIN_SECRET_KEY=${{ secrets.ADMIN_SECRET_KEY }}" >> .env

          scp -i ~/.ssh/ec2_key.pem .env ubuntu@${{ secrets.EC2_HOST }}:/home/ubuntu/.env

      # 6. Run app on EC2
      - name: Restart Spring Boot app
        run: |
          ssh -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            # 종료 중인 프로세스 찾기
            PID=$(pgrep -f 'java -jar')
            if [ -n "$PID" ]; then
              echo "🔻 기존 앱 종료: PID=$PID"
              kill -9 $PID
            fi

            # 앱 실행 (.env에서 환경변수 로딩)
            echo "🚀 앱 실행 시작"
            nohup bash -c 'set -a && source /home/ubuntu/.env && java -jar /home/ubuntu/app.jar' > app.log 2>&1 &
            sleep 2
            echo "🧾 실행 로그:"
            tail -n 20 app.log
          EOF

